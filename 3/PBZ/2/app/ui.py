import streamlit as st
import requests
import pandas as pd
from datetime import date, datetime

API_URL = "http://localhost:8000"

st.set_page_config(page_title="MTC System", layout="wide")

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π ===
if "user" not in st.session_state:
    st.session_state["user"] = None

if not st.session_state["user"]:
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –ú–¢–°")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        with st.form("login_form"):
            login = st.text_input("–õ–æ–≥–∏–Ω")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            if st.form_submit_button("–í–æ–π—Ç–∏"):
                try:
                    resp = requests.post(f"{API_URL}/login", json={"login": login, "password": password})
                    if resp.ok:
                        st.session_state["user"] = resp.json()
                        st.rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                except requests.exceptions.ConnectionError:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É API.")
    st.stop()

user = st.session_state["user"]
role = user.get("role")
user_id = user.get("user_id")

st.sidebar.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: **{role}**")
st.sidebar.button("üö™ –í—ã–π—Ç–∏", on_click=lambda: st.session_state.clear() or st.rerun())

headers = {"role": role}

# ============================================================
# === –ò–ù–¢–ï–†–§–ï–ô–° –¢–ï–•–ù–û–õ–û–ì–ê ===
# ============================================================
if role == "technologist":
    st.title("–ü–∞–Ω–µ–ª—å –¢–µ—Ö–Ω–æ–ª–æ–≥–∞")
    tab = st.sidebar.radio("–ú–µ–Ω—é", ["–ö–ª–∏–µ–Ω—Ç—ã", "–¢–∞—Ä–∏—Ñ—ã", "–û—Ç—á–µ—Ç—ã"])

    # --- –í–ö–õ–ê–î–ö–ê –ö–õ–ò–ï–ù–¢–´ ---
    if tab == "–ö–ª–∏–µ–Ω—Ç—ã":
        st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        try:
            clients_resp = requests.get(f"{API_URL}/clients", headers=headers)
            if not clients_resp.ok:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
                st.stop()

            clients_list = clients_resp.json()
            clients_df = pd.DataFrame(clients_list)
            st.dataframe(clients_df, use_container_width=True)

            # --- –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ì–û –ö–õ–ò–ï–ù–¢–ê ---
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"):
                with st.form("new_client_form", clear_on_submit=True):
                    st.subheader("–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                    login = st.text_input("–õ–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞")
                    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                    name = st.text_input("–§–ò–û")
                    phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
                    address = st.text_area("–ê–¥—Ä–µ—Å")
                    reg_date = st.date_input("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", value=date.today())
                    if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"):
                        data = {"login": login, "password": password, "full_name": name, "phone_number": phone,
                                "address": address, "registration_date": str(reg_date)}
                        requests.post(f"{API_URL}/clients", json=data, headers=headers)
                        st.success("–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                        st.rerun()

            # --- –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –ö–õ–ò–ï–ù–¢–û–ú ---
            st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
            if not clients_list:
                st.warning("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            else:
                selected_client = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    options=clients_list,
                    format_func=lambda x: f"{x['full_name']} (ID: {x['client_id']})"
                )

                if selected_client:
                    # --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ---
                    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"):
                        with st.form(f"edit_client_{selected_client['client_id']}", clear_on_submit=False):
                            st.write(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: **{selected_client['full_name']}**")
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç date –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞
                            reg_date_obj = datetime.fromisoformat(
                                selected_client['registration_date']).date() if selected_client.get(
                                'registration_date') else date.today()

                            edit_data = {
                                "full_name": st.text_input("–§–ò–û", value=selected_client['full_name']),
                                "phone_number": st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", value=selected_client['phone_number']),
                                "address": st.text_area("–ê–¥—Ä–µ—Å", value=selected_client['address']),
                                "registration_date": str(st.date_input("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", value=reg_date_obj))
                            }
                            if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                                requests.put(f"{API_URL}/clients/{selected_client['client_id']}", json=edit_data,
                                             headers=headers)
                                st.success(f"–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {selected_client['full_name']} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                                st.rerun()

                    # --- –£–î–ê–õ–ï–ù–ò–ï ---
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞", key=f"del_{selected_client['client_id']}"):
                        requests.delete(f"{API_URL}/clients/{selected_client['client_id']}", headers=headers)
                        st.success(f"–ö–ª–∏–µ–Ω—Ç {selected_client['full_name']} —É–¥–∞–ª–µ–Ω.")
                        st.rerun()

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏: {e}")

    # --- –í–ö–õ–ê–î–ö–ê –¢–ê–†–ò–§–´ ---
    elif tab == "–¢–∞—Ä–∏—Ñ—ã":
        st.header("üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏")
        try:
            tariffs_resp = requests.get(f"{API_URL}/tariffs", headers=headers)
            if not tariffs_resp.ok:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤.")
                st.stop()

            tariffs_list = tariffs_resp.json()
            tariffs_df = pd.DataFrame(tariffs_list)
            st.dataframe(tariffs_df, use_container_width=True)

            # --- –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ì–û –¢–ê–†–ò–§–ê ---
            with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ"):
                with st.form("new_tariff_form", clear_on_submit=True):
                    provider_id = st.number_input("ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", min_value=1, step=1)
                    effective_date = st.date_input("–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É", value=date.today())
                    city_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
                    standard_rate = st.number_input("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", format="%.2f")
                    preferential_rate = st.number_input("–õ—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", format="%.2f")
                    if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ"):
                        data = {"provider_id": provider_id, "effective_date": str(effective_date),
                                "city_name": city_name, "standard_rate": standard_rate,
                                "preferential_rate": preferential_rate}
                        requests.post(f"{API_URL}/tariffs", json=data, headers=headers)
                        st.success("–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                        st.rerun()

            # --- –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú –¢–ê–†–ò–§–û–ú ---
            st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤")
            if not tariffs_list:
                st.warning("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
            else:
                selected_tariff = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    options=tariffs_list,
                    format_func=lambda x: f"{x['city_name']} –æ—Ç {x['effective_date']} (ID: {x['tariff_id']})"
                )

                if selected_tariff:
                    # --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï ---
                    with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ"):
                        with st.form(f"edit_tariff_{selected_tariff['tariff_id']}", clear_on_submit=False):
                            st.write(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è: **{selected_tariff['city_name']}**")
                            eff_date_obj = datetime.fromisoformat(
                                selected_tariff['effective_date']).date() if selected_tariff.get(
                                'effective_date') else date.today()

                            edit_data = {
                                "provider_id": st.number_input("ID –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", value=selected_tariff['provider_id']),
                                "effective_date": str(st.date_input("–î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", value=eff_date_obj)),
                                "city_name": st.text_input("–ì–æ—Ä–æ–¥", value=selected_tariff['city_name']),
                                "standard_rate": st.number_input("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
                                                                 value=selected_tariff['standard_rate'], format="%.2f"),
                                "preferential_rate": st.number_input("–õ—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ",
                                                                     value=selected_tariff['preferential_rate'],
                                                                     format="%.2f")
                            }
                            if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
                                requests.put(f"{API_URL}/tariffs/{selected_tariff['tariff_id']}", json=edit_data,
                                             headers=headers)
                                st.success(f"–¢–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_tariff['city_name']} –æ–±–Ω–æ–≤–ª–µ–Ω.")
                                st.rerun()

                    # --- –£–î–ê–õ–ï–ù–ò–ï ---
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ", key=f"del_{selected_tariff['tariff_id']}"):
                        requests.delete(f"{API_URL}/tariffs/{selected_tariff['tariff_id']}", headers=headers)
                        st.success(f"–¢–∞—Ä–∏—Ñ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {selected_tariff['city_name']} —É–¥–∞–ª–µ–Ω.")
                        st.rerun()

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏: {e}")

    # --- –í–ö–õ–ê–î–ö–ê –û–¢–ß–ï–¢–´ ---
    elif tab == "–û—Ç—á–µ—Ç—ã":
        st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")
        report_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞", ["–î–æ–ª–∂–Ω–∏–∫–∏", "–ó–≤–æ–Ω–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –º–µ—Å—è—Ü", "–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –¥–∞—Ç—É"])

        if report_type == "–î–æ–ª–∂–Ω–∏–∫–∏":
            st.subheader("–ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é (—Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã > 20 –¥–Ω–µ–π)")
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                resp = requests.get(f"{API_URL}/reports/debtors", headers=headers)
                st.dataframe(pd.DataFrame(resp.json()), use_container_width=True)

        elif report_type == "–ó–≤–æ–Ω–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É –∑–∞ –º–µ—Å—è—Ü":
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ –≤ –≥–æ—Ä–æ–¥ –∑–∞ –º–µ—Å—è—Ü")
            city = st.text_input("–ì–æ—Ä–æ–¥")
            month = st.number_input("–ú–µ—Å—è—Ü", min_value=1, max_value=12, value=date.today().month)
            year = st.number_input("–ì–æ–¥", min_value=2020, max_value=date.today().year, value=date.today().year)
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                params = {"city": city, "month": month, "year": year}
                resp = requests.get(f"{API_URL}/reports/calls_by_city", headers=headers, params=params)
                if resp.ok:
                    df = pd.DataFrame(resp.json())
                    st.dataframe(df, use_container_width=True)
                    if not df.empty:
                        st.bar_chart(df.set_index('call_day')['total_calls'])
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {resp.text}")

        elif report_type == "–¢–∞—Ä–∏—Ñ—ã –Ω–∞ –¥–∞—Ç—É":
            st.subheader("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É")
            report_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", date.today())
            if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                params = {"report_date": str(report_date)}
                resp = requests.get(f"{API_URL}/reports/tariffs_on_date", headers=headers, params=params)
                if resp.ok:
                    st.dataframe(pd.DataFrame(resp.json()), use_container_width=True)
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {resp.text}")

# ============================================================
# === –ò–ù–¢–ï–†–§–ï–ô–° –û–ü–ï–†–ê–¢–û–†–ê ===
# ============================================================
elif role == "operator":
    st.title("–ü–∞–Ω–µ–ª—å –û–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    st.header("‚òéÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞–º–∏")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        clients_resp = requests.get(f"{API_URL}/clients", headers=headers)
        tariffs_resp = requests.get(f"{API_URL}/tariffs", headers=headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        if clients_resp.ok and tariffs_resp.ok:
            clients_list = clients_resp.json()
            tariffs_list = tariffs_resp.json()
        else:
            clients_list = []
            tariffs_list = []
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤.")

        with st.expander("‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫", expanded=True):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            if not clients_list or not tariffs_list:
                st.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤–æ–Ω–æ–∫: –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–∞—Ä–∏—Ñ–æ–≤.")
            else:
                with st.form("new_call_form", clear_on_submit=True):
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    selected_client = st.selectbox(
                        "–ö–ª–∏–µ–Ω—Ç",
                        options=clients_list,
                        format_func=lambda x: f"{x['full_name']} (ID: {x['client_id']})"
                    )

                    selected_tariff = st.selectbox(
                        "–¢–∞—Ä–∏—Ñ",
                        options=tariffs_list,
                        format_func=lambda x: f"{x['city_name']} –æ—Ç {x['effective_date']} (ID: {x['tariff_id']})"
                    )

                    destination_city = st.text_input("–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                    duration_minutes = st.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç)", min_value=1)

                    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –∑–≤–æ–Ω–æ–∫")

                    if submitted:
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        if selected_client and selected_tariff:
                            data = {
                                "client_id": selected_client['client_id'],
                                "tariff_id": selected_tariff['tariff_id'],
                                "destination_city": destination_city,
                                "duration_minutes": duration_minutes
                            }
                            requests.post(f"{API_URL}/calls", json=data, headers=headers)
                            st.success("–ó–≤–æ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                            st.rerun()
                        else:
                            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–∞—Ä–∏—Ñ.")

        st.subheader("–í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏")
        calls_resp = requests.get(f"{API_URL}/calls", headers=headers)
        if calls_resp.ok:
            st.dataframe(pd.DataFrame(calls_resp.json()), use_container_width=True)

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# ============================================================
# === –ò–ù–¢–ï–†–§–ï–ô–° –ö–õ–ò–ï–ù–¢–ê ===
# ============================================================
elif role == "client":
    st.title(f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
    st.header("üí≥ –ú–æ–∏ –∑–≤–æ–Ω–∫–∏ –∏ –æ–ø–ª–∞—Ç–∞")

    try:
        # –ü–æ–ª—É—á–∞–µ–º client_id –ø–æ user_id
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–æ –±—ã —á–∞—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
        clients_resp = requests.get(f"{API_URL}/clients", headers={"role": "technologist"})
        client_info = next((c for c in clients_resp.json() if c.get('user_id') == user_id), None)

        if not client_info:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
            st.stop()

        client_id_from_session = client_info['client_id']
        params = {"client_id": client_id_from_session}
        resp = requests.get(f"{API_URL}/calls", headers=headers, params=params)
        df = pd.DataFrame(resp.json())

        st.subheader("–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏")
        df_unpaid = df[df["is_paid"] == False]

        if df_unpaid.empty:
            st.success("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤. üéâ")
        else:
            for index, row in df_unpaid.iterrows():
                col1, col2, col3, col4, col5 = st.columns(5)
                col1.text(row['destination_city'])
                col2.text(datetime.fromisoformat(row['call_date']).strftime('%Y-%m-%d %H:%M'))
                col3.text(f"{row['duration_minutes']} –º–∏–Ω.")
                col4.text(f"{row['call_cost']} —Ä—É–±.")
                if col5.button("–û–ø–ª–∞—Ç–∏—Ç—å", key=f"pay_{row['call_id']}"):
                    pay_resp = requests.put(f"{API_URL}/calls/{row['call_id']}/pay", headers=headers)
                    if pay_resp.ok:
                        st.success(f"–ó–≤–æ–Ω–æ–∫ #{row['call_id']} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!")
                        st.rerun()
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.")

        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤")
        st.dataframe(df, use_container_width=True)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")